{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g4_GAaMOMtz5",
        "outputId": "ac4a2e46-e29d-41f8-c904-085584dd07f3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello world\n"
          ]
        }
      ],
      "source": [
        "print (\"Hello world\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "_o2nA642N6Zf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q1) Discuss string slicing and provide examples?\n",
        "\n",
        "A1) **String slicing** in Python refers to extracting a portion (or slice) of a string by specifying a range of indices. It uses the syntax `string[start:stop:step]`, where:\n",
        "\n",
        "- `start`: The index at which the slice begins (inclusive).\n",
        "- `stop`: The index at which the slice ends (exclusive).\n",
        "- `step`: Specifies the increment between indices (optional).\n",
        "\n",
        "### Key points:\n",
        "1. **Start and stop** are optional. By default:\n",
        "   - `start` is `0`.\n",
        "   - `stop` is the length of the string.\n",
        "2. **Step** is also optional, and the default value is `1`.\n",
        "\n",
        "### Examples:\n",
        "```python\n",
        "# Example string\n",
        "text = \"Hello, World!\"\n",
        "```\n",
        "\n",
        "1. **Extracting a substring:**\n",
        "   ```python\n",
        "   print(text[0:5])  # Output: Hello\n",
        "   ```\n",
        "   This extracts characters from index `0` to `4` (not including `5`).\n",
        "\n",
        "2. **Omitting the start or stop:**\n",
        "   ```python\n",
        "   print(text[:5])   # Output: Hello\n",
        "   print(text[7:])   # Output: World!\n",
        "   ```\n",
        "\n",
        "3. **Negative indices:**\n",
        "   Python allows negative indices to count from the end of the string.\n",
        "   ```python\n",
        "   print(text[-6:-1])  # Output: World\n",
        "   print(text[-1])     # Output: !\n",
        "   ```\n",
        "\n",
        "4. **Using step:**\n",
        "   The step value defines how many characters to skip.\n",
        "   ```python\n",
        "   print(text[::2])    # Output: Hlo ol!\n",
        "   print(text[1::2])   # Output: el,Wrd\n",
        "   ```\n",
        "\n",
        "5. **Reversing a string:**\n",
        "   By using a negative step value, you can reverse the string.\n",
        "   ```python\n",
        "   print(text[::-1])   # Output: !dlroW ,olleH\n",
        "   ```\n",
        "\n",
        "String slicing is powerful and flexible for various text manipulations."
      ],
      "metadata": {
        "id": "Fr-3NBLFOUFv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q2) Explain the key features of lists in python?\n",
        "\n",
        "A2) Python lists are versatile and commonly used data structures that can store collections of items. Below are some of the key features of lists in Python:\n",
        "\n",
        "### 1. **Ordered Collection**:\n",
        "   - Lists maintain the order of items. The elements are stored in the sequence they are added, and you can access them by their index.\n",
        "   ```python\n",
        "   my_list = [1, 2, 3, 4]\n",
        "   print(my_list[0])  # Output: 1\n",
        "   ```\n",
        "\n",
        "### 2. **Mutable**:\n",
        "   - Lists are mutable, meaning you can change their content after creation by adding, removing, or updating elements.\n",
        "   ```python\n",
        "   my_list[1] = 'changed'\n",
        "   print(my_list)  # Output: [1, 'changed', 3, 4]\n",
        "   ```\n",
        "\n",
        "### 3. **Heterogeneous**:\n",
        "   - Lists can store elements of different data types (integers, strings, floats, other lists, etc.).\n",
        "   ```python\n",
        "   my_list = [1, 'apple', 3.14, [5, 6]]\n",
        "   print(my_list)  # Output: [1, 'apple', 3.14, [5, 6]]\n",
        "   ```\n",
        "\n",
        "### 4. **Dynamic Size**:\n",
        "   - Lists are dynamic, meaning they can grow or shrink in size. You can add or remove items at any time.\n",
        "   ```python\n",
        "   my_list.append(5)\n",
        "   print(my_list)  # Output: [1, 'apple', 3.14, [5, 6], 5]\n",
        "   ```\n",
        "\n",
        "### 5. **Indexing and Slicing**:\n",
        "   - Lists support both positive and negative indexing, as well as slicing to extract sublists.\n",
        "   ```python\n",
        "   print(my_list[1:3])   # Output: ['apple', 3.14]\n",
        "   print(my_list[-1])    # Output: 5\n",
        "   ```\n",
        "\n",
        "### 6. **List Comprehension**:\n",
        "   - List comprehension allows for creating new lists by applying expressions to each element of an existing list in a concise way.\n",
        "   ```python\n",
        "   squares = [x**2 for x in range(5)]\n",
        "   print(squares)  # Output: [0, 1, 4, 9, 16]\n",
        "   ```\n",
        "\n",
        "### 7. **Built-in Methods**:\n",
        "   - Lists have several useful methods for various operations, such as `append()`, `remove()`, `sort()`, `reverse()`, `extend()`, and more.\n",
        "   ```python\n",
        "   my_list = [1, 3, 2]\n",
        "   my_list.sort()\n",
        "   print(my_list)  # Output: [1, 2, 3]\n",
        "   ```\n",
        "\n",
        "### 8. **Can Contain Duplicate Elements**:\n",
        "   - Lists can contain duplicate elements, unlike sets.\n",
        "   ```python\n",
        "   my_list = [1, 2, 2, 3]\n",
        "   print(my_list)  # Output: [1, 2, 2, 3]\n",
        "   ```\n",
        "\n",
        "### 9. **Iterability**:\n",
        "   - You can iterate over the elements of a list using loops, making it easy to process each item.\n",
        "   ```python\n",
        "   for item in my_list:\n",
        "       print(item)\n",
        "   ```\n",
        "\n",
        "Lists in Python provide a simple yet powerful way to handle collections of items, making them an essential part of Python programming."
      ],
      "metadata": {
        "id": "RnaBz7-_Og2y"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q3) Describe how to access, modify, and delete elements in a list with examples?\n",
        "\n",
        "A3) ### Accessing, Modifying, and Deleting Elements in a Python List\n",
        "\n",
        "Python provides simple ways to access, modify, and delete elements from a list using indexing and built-in functions. Letâ€™s explore each operation with examples.\n",
        "\n",
        "### 1. **Accessing Elements in a List**\n",
        "You can access individual elements in a list using **indexing**. Indexing starts at `0` for the first element, and negative indexing can be used to access elements from the end.\n",
        "\n",
        "#### Example:\n",
        "```python\n",
        "my_list = [10, 20, 30, 40, 50]\n",
        "\n",
        "# Accessing elements with positive index\n",
        "print(my_list[1])    # Output: 20\n",
        "\n",
        "# Accessing elements with negative index\n",
        "print(my_list[-1])   # Output: 50\n",
        "```\n",
        "\n",
        "You can also use **slicing** to access multiple elements.\n",
        "```python\n",
        "# Slicing: elements from index 1 to 3 (excluding 4)\n",
        "print(my_list[1:4])  # Output: [20, 30, 40]\n",
        "```\n",
        "\n",
        "### 2. **Modifying Elements in a List**\n",
        "Lists are mutable, so you can change their elements by directly assigning new values using indexing.\n",
        "\n",
        "#### Example:\n",
        "```python\n",
        "my_list = [10, 20, 30, 40]\n",
        "\n",
        "# Modifying the element at index 2\n",
        "my_list[2] = 100\n",
        "print(my_list)  # Output: [10, 20, 100, 40]\n",
        "```\n",
        "\n",
        "You can also modify a range of elements using slicing.\n",
        "```python\n",
        "# Modifying a slice\n",
        "my_list[1:3] = [200, 300]\n",
        "print(my_list)  # Output: [10, 200, 300, 40]\n",
        "```\n",
        "\n",
        "### 3. **Deleting Elements in a List**\n",
        "You can delete elements from a list using the `del` keyword, `remove()`, `pop()`, or `clear()` methods.\n",
        "\n",
        "#### Using `del`:\n",
        "- `del` is used to delete an element at a specific index or to delete a slice of elements.\n",
        "\n",
        "```python\n",
        "my_list = [10, 20, 30, 40]\n",
        "\n",
        "# Deleting the element at index 1\n",
        "del my_list[1]\n",
        "print(my_list)  # Output: [10, 30, 40]\n",
        "\n",
        "# Deleting a slice of elements\n",
        "del my_list[1:]\n",
        "print(my_list)  # Output: [10]\n",
        "```\n",
        "\n",
        "#### Using `remove()`:\n",
        "- `remove()` deletes the first occurrence of a specific value.\n",
        "\n",
        "```python\n",
        "my_list = [10, 20, 30, 40]\n",
        "\n",
        "# Remove the element with value 30\n",
        "my_list.remove(30)\n",
        "print(my_list)  # Output: [10, 20, 40]\n",
        "```\n",
        "\n",
        "#### Using `pop()`:\n",
        "- `pop()` removes an element at a specific index and returns it. If no index is provided, it removes and returns the last element.\n",
        "\n",
        "```python\n",
        "my_list = [10, 20, 30, 40]\n",
        "\n",
        "# Remove and return the element at index 2\n",
        "popped_element = my_list.pop(2)\n",
        "print(popped_element)  # Output: 30\n",
        "print(my_list)         # Output: [10, 20, 40]\n",
        "\n",
        "# Remove and return the last element\n",
        "last_element = my_list.pop()\n",
        "print(last_element)    # Output: 40\n",
        "```\n",
        "\n",
        "#### Using `clear()`:\n",
        "- `clear()` removes all elements from the list, leaving it empty.\n",
        "\n",
        "```python\n",
        "my_list = [10, 20, 30, 40]\n",
        "\n",
        "# Clear all elements from the list\n",
        "my_list.clear()\n",
        "print(my_list)  # Output: []\n",
        "```\n",
        "\n",
        "### Summary\n",
        "- **Access elements**: Use indexing or slicing.\n",
        "- **Modify elements**: Assign new values via indexing or slicing.\n",
        "- **Delete elements**: Use `del`, `remove()`, `pop()`, or `clear()` depending on the specific requirement."
      ],
      "metadata": {
        "id": "6BZseuukPADQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q4) Compare and contrast tuples and lists with examples?\n",
        "\n",
        "A4) **Tuples** and **Lists** are both data structures in Python used to store collections of items, but they differ in key ways. Below is a comparison and contrast between the two, highlighting their differences and similarities.\n",
        "\n",
        "### 1. **Mutability**:\n",
        "   - **List**: Mutable, meaning elements can be changed, added, or removed after creation.\n",
        "   - **Tuple**: Immutable, meaning once a tuple is created, its elements cannot be modified.\n",
        "\n",
        "#### Example:\n",
        "```python\n",
        "# List example (mutable)\n",
        "my_list = [1, 2, 3]\n",
        "my_list[1] = 'changed'\n",
        "print(my_list)  # Output: [1, 'changed', 3]\n",
        "\n",
        "# Tuple example (immutable)\n",
        "my_tuple = (1, 2, 3)\n",
        "# my_tuple[1] = 'changed'  # This will raise a TypeError\n",
        "```\n",
        "\n",
        "### 2. **Syntax**:\n",
        "   - **List**: Defined using square brackets `[]`.\n",
        "   - **Tuple**: Defined using parentheses `()`.\n",
        "\n",
        "#### Example:\n",
        "```python\n",
        "# List\n",
        "my_list = [1, 2, 3]\n",
        "\n",
        "# Tuple\n",
        "my_tuple = (1, 2, 3)\n",
        "```\n",
        "\n",
        "### 3. **Performance**:\n",
        "   - **List**: Slower compared to tuples because of the additional overhead of mutability.\n",
        "   - **Tuple**: Faster because they are immutable and thus optimized for performance.\n",
        "\n",
        "#### Example (general use case):\n",
        "Tuples are slightly faster for read-only operations since no internal changes are allowed.\n",
        "\n",
        "### 4. **Use Cases**:\n",
        "   - **List**: Used when you need a collection of items that may change during the program's execution (e.g., adding, removing, or updating elements).\n",
        "   - **Tuple**: Used when you need a fixed collection of items, typically for data that shouldn't change (e.g., coordinates, function return values).\n",
        "\n",
        "#### Example:\n",
        "```python\n",
        "# List example: modifying a list of names\n",
        "names = ['Alice', 'Bob', 'Charlie']\n",
        "names.append('Dave')\n",
        "print(names)  # Output: ['Alice', 'Bob', 'Charlie', 'Dave']\n",
        "\n",
        "# Tuple example: fixed coordinates\n",
        "coordinates = (10, 20)\n",
        "# coordinates[0] = 30  # This will raise a TypeError since tuples are immutable\n",
        "```\n",
        "\n",
        "### 5. **Methods**:\n",
        "   - **List**: Offers more built-in methods for modifying data like `append()`, `remove()`, `pop()`, `sort()`, etc.\n",
        "   - **Tuple**: Has fewer methods, mainly related to counting or finding values (`count()`, `index()`).\n",
        "\n",
        "#### Example:\n",
        "```python\n",
        "# List methods\n",
        "my_list = [1, 2, 3]\n",
        "my_list.append(4)\n",
        "print(my_list)  # Output: [1, 2, 3, 4]\n",
        "\n",
        "# Tuple methods\n",
        "my_tuple = (1, 2, 3, 2)\n",
        "print(my_tuple.count(2))  # Output: 2 (counts occurrences of 2)\n",
        "print(my_tuple.index(3))  # Output: 2 (finds the index of 3)\n",
        "```\n",
        "\n",
        "### 6. **Size**:\n",
        "   - **List**: Generally larger in memory due to additional functionality (like mutability).\n",
        "   - **Tuple**: Smaller in memory because they are immutable and have less overhead.\n",
        "\n",
        "#### Example (in terms of storage):\n",
        "Tuples take up less memory space, which can be beneficial when handling large datasets that donâ€™t require modification.\n",
        "\n",
        "### 7. **Immutability and Safety**:\n",
        "   - **List**: Can be changed, which may introduce potential bugs if not carefully handled.\n",
        "   - **Tuple**: Immutable, making it a safer choice for data that should remain constant throughout the program.\n",
        "\n",
        "#### Example:\n",
        "Tuples can be used as keys in dictionaries, while lists cannot, due to their immutability.\n",
        "```python\n",
        "# Tuple as a dictionary key\n",
        "my_dict = { (1, 2): 'coordinates' }\n",
        "print(my_dict[(1, 2)])  # Output: 'coordinates'\n",
        "\n",
        "# List cannot be used as a dictionary key\n",
        "# my_dict = { [1, 2]: 'coordinates' }  # This will raise a TypeError\n",
        "```\n",
        "\n",
        "### 8. **Packing and Unpacking**:\n",
        "   - Both **lists** and **tuples** support packing and unpacking of values.\n",
        "\n",
        "#### Example:\n",
        "```python\n",
        "# Packing values into a tuple\n",
        "my_tuple = 1, 2, 3\n",
        "\n",
        "# Unpacking a tuple\n",
        "a, b, c = my_tuple\n",
        "print(a, b, c)  # Output: 1 2 3\n",
        "```\n",
        "\n",
        "### Summary Table:\n",
        "\n",
        "| Feature        | List                      | Tuple                      |\n",
        "|----------------|---------------------------|----------------------------|\n",
        "| **Mutability** | Mutable (can modify)       | Immutable (cannot modify)   |\n",
        "| **Syntax**     | Square brackets `[]`       | Parentheses `()`            |\n",
        "| **Performance**| Slower                     | Faster                      |\n",
        "| **Methods**    | Many (e.g., `append()`, `remove()`) | Fewer (e.g., `count()`, `index()`) |\n",
        "| **Use Cases**  | Dynamic data               | Static, fixed data          |\n",
        "| **Size**       | Larger memory footprint    | Smaller memory footprint    |\n",
        "| **Immutability**| Can change elements, introducing risks | Safer, cannot be changed     |\n",
        "\n",
        "In summary, use **lists** when you need flexibility and your data might change, while **tuples** are preferable when your data should remain constant for the programâ€™s duration."
      ],
      "metadata": {
        "id": "3tdsQnn_Pwy3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q5) Describe the key features of sets and provide examples and their use?\n",
        "\n",
        "A5) A **set** in Python is an unordered collection of unique elements. It is used to store multiple items in a single variable, ensuring that no duplicates exist. Sets are commonly used when the uniqueness of elements is important and when you need efficient membership checks.\n",
        "\n",
        "### Key Features of Sets:\n",
        "\n",
        "### 1. **Unordered**:\n",
        "   - Sets do not maintain any specific order of elements. The items in a set may appear in any random order during iterations.\n",
        "   ```python\n",
        "   my_set = {3, 1, 2}\n",
        "   print(my_set)  # Output: {1, 2, 3} (order may vary)\n",
        "   ```\n",
        "\n",
        "### 2. **Unique Elements**:\n",
        "   - A set automatically removes any duplicate values. It stores only unique elements.\n",
        "   ```python\n",
        "   my_set = {1, 2, 2, 3, 3, 4}\n",
        "   print(my_set)  # Output: {1, 2, 3, 4}\n",
        "   ```\n",
        "\n",
        "### 3. **Mutable**:\n",
        "   - Although the elements in a set are immutable (cannot be changed), the set itself is mutable, meaning you can add or remove elements.\n",
        "\n",
        "   ```python\n",
        "   my_set = {1, 2, 3}\n",
        "   my_set.add(4)\n",
        "   print(my_set)  # Output: {1, 2, 3, 4}\n",
        "   ```\n",
        "\n",
        "### 4. **No Indexing or Slicing**:\n",
        "   - Since sets are unordered, you cannot access elements by index or use slicing, like in lists or tuples.\n",
        "\n",
        "   ```python\n",
        "   my_set = {1, 2, 3}\n",
        "   # print(my_set[0])  # Raises a TypeError: 'set' object is not subscriptable\n",
        "   ```\n",
        "\n",
        "### 5. **Efficient Membership Testing**:\n",
        "   - Sets provide efficient ways to check if an element exists in the collection. The time complexity for checking membership is O(1).\n",
        "   \n",
        "   ```python\n",
        "   my_set = {1, 2, 3}\n",
        "   print(2 in my_set)  # Output: True\n",
        "   ```\n",
        "\n",
        "### 6. **Set Operations (Union, Intersection, Difference)**:\n",
        "   - Sets support mathematical operations like **union**, **intersection**, and **difference** for comparing and combining sets.\n",
        "   \n",
        "   - **Union**: Combines all elements from two sets, eliminating duplicates.\n",
        "   ```python\n",
        "   set1 = {1, 2, 3}\n",
        "   set2 = {3, 4, 5}\n",
        "   print(set1 | set2)  # Output: {1, 2, 3, 4, 5} (union)\n",
        "   ```\n",
        "\n",
        "   - **Intersection**: Returns elements common to both sets.\n",
        "   ```python\n",
        "   print(set1 & set2)  # Output: {3} (intersection)\n",
        "   ```\n",
        "\n",
        "   - **Difference**: Returns elements in the first set but not in the second.\n",
        "   ```python\n",
        "   print(set1 - set2)  # Output: {1, 2} (difference)\n",
        "   ```\n",
        "\n",
        "   - **Symmetric Difference**: Returns elements that are in either set, but not in both.\n",
        "   ```python\n",
        "   print(set1 ^ set2)  # Output: {1, 2, 4, 5} (symmetric difference)\n",
        "   ```\n",
        "\n",
        "### 7. **Mutable Set Methods**:\n",
        "   - **add()**: Adds a single element to the set.\n",
        "   - **update()**: Adds multiple elements to the set.\n",
        "   - **remove()**: Removes a specified element (raises error if not found).\n",
        "   - **discard()**: Removes a specified element (no error if not found).\n",
        "   - **pop()**: Removes a random element.\n",
        "   - **clear()**: Removes all elements from the set.\n",
        "\n",
        "   ```python\n",
        "   my_set = {1, 2, 3}\n",
        "   my_set.add(4)            # Adds 4\n",
        "   my_set.update([5, 6])    # Adds multiple elements\n",
        "   my_set.remove(1)         # Removes 1\n",
        "   print(my_set)  # Output: {2, 3, 4, 5, 6}\n",
        "   ```\n",
        "\n",
        "### 8. **Immutability of Frozenset**:\n",
        "   - Python also has an immutable version of a set called a **frozenset**. Once created, you cannot modify the elements of a frozenset.\n",
        "\n",
        "   ```python\n",
        "   my_frozenset = frozenset([1, 2, 3])\n",
        "   # my_frozenset.add(4)  # Raises AttributeError: 'frozenset' object has no attribute 'add'\n",
        "   ```\n",
        "\n",
        "### Common Use Cases of Sets:\n",
        "\n",
        "1. **Removing Duplicates from a Collection**:\n",
        "   - Sets are commonly used to eliminate duplicates from a list or another collection.\n",
        "\n",
        "   ```python\n",
        "   my_list = [1, 2, 2, 3, 4, 4, 5]\n",
        "   unique_set = set(my_list)\n",
        "   print(unique_set)  # Output: {1, 2, 3, 4, 5}\n",
        "   ```\n",
        "\n",
        "2. **Membership Testing**:\n",
        "   - Since sets are optimized for membership testing, they are ideal when you need to check whether an item exists in a collection.\n",
        "   \n",
        "   ```python\n",
        "   allowed_items = {'apple', 'banana', 'cherry'}\n",
        "   if 'banana' in allowed_items:\n",
        "       print(\"Allowed\")  # Output: Allowed\n",
        "   ```\n",
        "\n",
        "3. **Set Operations for Data Comparison**:\n",
        "   - Sets are perfect for comparing data, such as finding common elements (intersection) or combining data without duplicates (union).\n",
        "\n",
        "   ```python\n",
        "   students_in_math = {'Alice', 'Bob', 'Charlie'}\n",
        "   students_in_science = {'Bob', 'Diana', 'Alice'}\n",
        "   \n",
        "   # Students who are in both math and science\n",
        "   common_students = students_in_math & students_in_science\n",
        "   print(common_students)  # Output: {'Bob', 'Alice'}\n",
        "   ```\n",
        "\n",
        "4. **Removing Elements Efficiently**:\n",
        "   - Since sets are unordered, removal of elements is faster compared to lists (O(1) in sets vs O(n) in lists).\n",
        "\n",
        "   ```python\n",
        "   my_set = {1, 2, 3, 4}\n",
        "   my_set.discard(3)  # Removes 3\n",
        "   print(my_set)  # Output: {1, 2, 4}\n",
        "   ```\n",
        "\n",
        "### Conclusion:\n",
        "Sets are ideal when you need a collection of unique elements and efficient operations like membership tests or set-based comparisons. They are especially useful when working with large datasets or when performing mathematical operations on groups of data."
      ],
      "metadata": {
        "id": "1gOKNW4_QQgx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q6) Discuss the use cases of tuples and sets in python programming?\n",
        "\n",
        "A6) Tuples and sets in Python are both powerful data structures, each with distinct characteristics that make them useful in different contexts. Let's explore the typical **use cases** for both **tuples** and **sets**.\n",
        "\n",
        "---\n",
        "\n",
        "## **Use Cases of Tuples**\n",
        "\n",
        "### 1. **Fixed Data Structures**:\n",
        "   - **Tuples** are useful when you need to store a collection of items that should not be changed during the execution of the program. For example, you might use a tuple to store constant values like **coordinates** or **RGB color codes**.\n",
        "\n",
        "   ```python\n",
        "   coordinates = (10, 20)\n",
        "   color = (255, 0, 0)  # RGB red\n",
        "   ```\n",
        "\n",
        "### 2. **Returning Multiple Values from a Function**:\n",
        "   - Functions in Python can only return one object, but with tuples, you can return multiple values in a clean and organized way.\n",
        "   \n",
        "   ```python\n",
        "   def get_student_info():\n",
        "       name = \"Alice\"\n",
        "       age = 20\n",
        "       grade = \"A\"\n",
        "       return name, age, grade\n",
        "\n",
        "   student = get_student_info()\n",
        "   print(student)  # Output: ('Alice', 20, 'A')\n",
        "   ```\n",
        "\n",
        "### 3. **Dictionary Keys**:\n",
        "   - **Tuples** can be used as **keys in dictionaries** because they are immutable. Lists, being mutable, cannot be used as dictionary keys. This is useful when you need to use composite keys (keys made of multiple elements).\n",
        "\n",
        "   ```python\n",
        "   coordinates_dict = { (10, 20): 'Location A', (30, 40): 'Location B' }\n",
        "   print(coordinates_dict[(10, 20)])  # Output: 'Location A'\n",
        "   ```\n",
        "\n",
        "### 4. **Data Integrity**:\n",
        "   - Since tuples are **immutable**, they are used to protect data from accidental modification. For example, if you want to ensure that certain data remains unchanged, a tuple is the ideal choice.\n",
        "\n",
        "   ```python\n",
        "   person = (\"John\", \"Doe\", 25)\n",
        "   # person[2] = 30  # Raises an error, protecting data integrity\n",
        "   ```\n",
        "\n",
        "### 5. **Iterating Over Immutable Sequences**:\n",
        "   - When iterating over a sequence where the order and content should remain constant, tuples are preferable over lists for better performance and readability.\n",
        "\n",
        "   ```python\n",
        "   days_of_week = (\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\n",
        "   for day in days_of_week:\n",
        "       print(day)\n",
        "   ```\n",
        "\n",
        "### 6. **Memory Efficiency**:\n",
        "   - Tuples consume less memory than lists, making them a good choice when handling large datasets of fixed values. This is especially relevant for large-scale data processing tasks where memory optimization is important.\n",
        "\n",
        "   ```python\n",
        "   data = (1, 2, 3, 4, 5)  # Takes less memory than [1, 2, 3, 4, 5]\n",
        "   ```\n",
        "\n",
        "### 7. **Named Tuples for Readability**:\n",
        "   - Python's `collections.namedtuple` allows you to create tuple-like objects with named fields, improving code readability without sacrificing immutability.\n",
        "\n",
        "   ```python\n",
        "   from collections import namedtuple\n",
        "   Person = namedtuple('Person', ['name', 'age'])\n",
        "   p = Person('Alice', 30)\n",
        "   print(p.name)  # Output: Alice\n",
        "   ```\n",
        "\n",
        "---\n",
        "\n",
        "## **Use Cases of Sets**\n",
        "\n",
        "### 1. **Removing Duplicates from a Collection**:\n",
        "   - **Sets** automatically eliminate duplicate elements. This makes sets a great tool for creating unique collections from a list that may contain repeated items.\n",
        "\n",
        "   ```python\n",
        "   my_list = [1, 2, 2, 3, 4, 4, 5]\n",
        "   unique_set = set(my_list)\n",
        "   print(unique_set)  # Output: {1, 2, 3, 4, 5}\n",
        "   ```\n",
        "\n",
        "### 2. **Efficient Membership Testing**:\n",
        "   - Sets provide fast membership testing with time complexity of O(1), making them a good choice when you frequently need to check if an item exists in a collection.\n",
        "   \n",
        "   ```python\n",
        "   allowed_items = {'apple', 'banana', 'cherry'}\n",
        "   if 'banana' in allowed_items:\n",
        "       print(\"Allowed\")  # Output: Allowed\n",
        "   ```\n",
        "\n",
        "### 3. **Mathematical Set Operations**:\n",
        "   - **Sets** are ideal for performing operations like **union**, **intersection**, **difference**, and **symmetric difference**, which are often required when working with collections in tasks like data analysis or filtering.\n",
        "   \n",
        "   ```python\n",
        "   set1 = {1, 2, 3}\n",
        "   set2 = {3, 4, 5}\n",
        "\n",
        "   # Union\n",
        "   print(set1 | set2)  # Output: {1, 2, 3, 4, 5}\n",
        "\n",
        "   # Intersection\n",
        "   print(set1 & set2)  # Output: {3}\n",
        "\n",
        "   # Difference\n",
        "   print(set1 - set2)  # Output: {1, 2}\n",
        "   ```\n",
        "\n",
        "### 4. **Removing Elements Efficiently**:\n",
        "   - Removing elements from a set is fast (O(1)) compared to lists (O(n)). This makes sets an excellent choice when working with data that frequently changes and requires element deletion.\n",
        "\n",
        "   ```python\n",
        "   my_set = {1, 2, 3, 4}\n",
        "   my_set.discard(3)  # Removes 3 without raising an error if not found\n",
        "   print(my_set)  # Output: {1, 2, 4}\n",
        "   ```\n",
        "\n",
        "### 5. **Finding Unique Items Across Multiple Collections**:\n",
        "   - Sets are useful in situations where you need to compare multiple collections and find **common** elements (intersection) or **distinct** elements (symmetric difference). This is often seen in tasks like comparing two databases or filtering search results.\n",
        "   \n",
        "   ```python\n",
        "   set1 = {'A', 'B', 'C'}\n",
        "   set2 = {'B', 'C', 'D'}\n",
        "   \n",
        "   # Find common items (intersection)\n",
        "   common_items = set1 & set2\n",
        "   print(common_items)  # Output: {'B', 'C'}\n",
        "   ```\n",
        "\n",
        "### 6. **Filtering Data Based on Multiple Conditions**:\n",
        "   - Sets can be used to filter data when you need to check for membership against multiple conditions or datasets.\n",
        "\n",
        "   ```python\n",
        "   all_products = {'laptop', 'phone', 'tablet', 'monitor'}\n",
        "   purchased = {'phone', 'tablet'}\n",
        "   \n",
        "   # Find products not yet purchased\n",
        "   remaining = all_products - purchased\n",
        "   print(remaining)  # Output: {'laptop', 'monitor'}\n",
        "   ```\n",
        "\n",
        "### 7. **Handling Large Data with Unique Values**:\n",
        "   - Sets are particularly useful in big data scenarios where you need to handle unique values efficiently, such as collecting unique IP addresses from a server log or finding distinct entries in a dataset.\n",
        "\n",
        "   ```python\n",
        "   ip_addresses = {\"192.168.1.1\", \"192.168.1.2\", \"192.168.1.1\"}\n",
        "   print(ip_addresses)  # Output: {\"192.168.1.1\", \"192.168.1.2\"}\n",
        "   ```\n",
        "\n",
        "---\n",
        "\n",
        "### **Summary**:\n",
        "\n",
        "- **Tuples** are best suited for situations where:\n",
        "  - You need to store a collection of immutable, fixed data.\n",
        "  - You want to return multiple values from a function.\n",
        "  - You need to use complex keys in dictionaries.\n",
        "  - Data integrity is crucial, and the values should remain constant.\n",
        "  \n",
        "- **Sets** are ideal for situations where:\n",
        "  - You need to eliminate duplicates.\n",
        "  - Membership tests need to be fast.\n",
        "  - Mathematical set operations (union, intersection, difference) are required.\n",
        "  - Efficient removal or filtering of elements is important.\n",
        "\n",
        "Both data structures are essential tools in Python for handling unique requirements in data storage and manipulation."
      ],
      "metadata": {
        "id": "9vvB75ssQv80"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q7) Describe how to add, modify, and delete items in a dictionary with examples?\n",
        "\n",
        "A7) A dictionary in Python is a collection of key-value pairs where each key is unique. You can add, modify, and delete items in a dictionary using simple methods. Here's how:\n",
        "\n",
        "### 1. **Adding Items**  \n",
        "To add an item to a dictionary, you simply assign a value to a new key.\n",
        "\n",
        "```python\n",
        "# Create an empty dictionary\n",
        "my_dict = {}\n",
        "\n",
        "# Adding items\n",
        "my_dict['name'] = 'Alice'\n",
        "my_dict['age'] = 25\n",
        "my_dict['city'] = 'New York'\n",
        "\n",
        "print(my_dict)\n",
        "```\n",
        "\n",
        "**Output:**\n",
        "```python\n",
        "{'name': 'Alice', 'age': 25, 'city': 'New York'}\n",
        "```\n",
        "\n",
        "### 2. **Modifying Items**  \n",
        "To modify an item, assign a new value to an existing key.\n",
        "\n",
        "```python\n",
        "# Modify the 'age' and 'city' values\n",
        "my_dict['age'] = 26\n",
        "my_dict['city'] = 'Los Angeles'\n",
        "\n",
        "print(my_dict)\n",
        "```\n",
        "\n",
        "**Output:**\n",
        "```python\n",
        "{'name': 'Alice', 'age': 26, 'city': 'Los Angeles'}\n",
        "```\n",
        "\n",
        "### 3. **Deleting Items**  \n",
        "To delete an item from the dictionary, use the `del` statement or the `pop()` method.\n",
        "\n",
        "- Using `del`:\n",
        "\n",
        "```python\n",
        "# Delete the 'age' key-value pair\n",
        "del my_dict['age']\n",
        "\n",
        "print(my_dict)\n",
        "```\n",
        "\n",
        "**Output:**\n",
        "```python\n",
        "{'name': 'Alice', 'city': 'Los Angeles'}\n",
        "```\n",
        "\n",
        "- Using `pop()`:\n",
        "\n",
        "```python\n",
        "# Delete the 'city' key-value pair and return its value\n",
        "city_value = my_dict.pop('city')\n",
        "\n",
        "print(city_value)  # Output: Los Angeles\n",
        "print(my_dict)     # Output: {'name': 'Alice'}\n",
        "```\n",
        "\n",
        "### 4. **Clearing the Dictionary**  \n",
        "To remove all items from a dictionary, use the `clear()` method.\n",
        "\n",
        "```python\n",
        "# Clear all items in the dictionary\n",
        "my_dict.clear()\n",
        "\n",
        "print(my_dict)\n",
        "```\n",
        "\n",
        "**Output:**\n",
        "```python\n",
        "{}\n",
        "```\n",
        "\n",
        "These methods allow you to efficiently manage the contents of a dictionary in Python."
      ],
      "metadata": {
        "id": "M7ncH2baRW6O"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q8) Discuss the importance of dictionary keys being immutable and provide examples?\n",
        "\n",
        "A8) In Python, dictionary keys must be **immutable** because dictionaries rely on the hash values of keys for quick lookup, storage, and retrieval. If a key were mutable, its hash value could change, which would make locating the associated value impossible. Immutable objects have consistent hash values, allowing Python's dictionary implementation to function efficiently.\n",
        "\n",
        "Hereâ€™s why the immutability of keys is important and examples illustrating it:\n",
        "\n",
        "### 1. **Hash-based Lookup**\n",
        "Python dictionaries use a hash table to store key-value pairs. Each key is hashed (a unique integer is generated based on the key), which is used to find the associated value quickly. Immutable objects (like strings, numbers, and tuples) maintain a consistent hash value.\n",
        "\n",
        "For example:\n",
        "\n",
        "```python\n",
        "# Valid keys (strings and integers are immutable)\n",
        "my_dict = {\n",
        "    'name': 'Alice',   # String key (immutable)\n",
        "    1: 'one',          # Integer key (immutable)\n",
        "    (2, 3): 'tuple'    # Tuple key (immutable if it contains only immutable elements)\n",
        "}\n",
        "```\n",
        "\n",
        "### 2. **Why Mutable Objects Can't Be Keys**\n",
        "Mutable objects, like lists or dictionaries, can be altered after their creation. If a mutable object was allowed as a key, changing its content would modify its hash value, which could break the dictionaryâ€™s internal data structure, leading to errors or incorrect lookups.\n",
        "\n",
        "For example, trying to use a list as a key would result in an error:\n",
        "\n",
        "```python\n",
        "# Invalid key (lists are mutable)\n",
        "invalid_dict = {\n",
        "    [1, 2, 3]: 'list'  # This will raise a TypeError\n",
        "}\n",
        "```\n",
        "\n",
        "**Error:**\n",
        "```python\n",
        "TypeError: unhashable type: 'list'\n",
        "```\n",
        "\n",
        "### 3. **Mutability of Tuples Containing Mutable Elements**\n",
        "Tuples themselves are immutable, but if a tuple contains mutable elements, it still can't be used as a key because the mutable element within the tuple can change, leading to an inconsistent hash.\n",
        "\n",
        "Example:\n",
        "\n",
        "```python\n",
        "# Invalid key (tuple contains a mutable list)\n",
        "invalid_dict = {\n",
        "    (1, 2, [3, 4]): 'invalid'  # Raises a TypeError because of the list\n",
        "}\n",
        "```\n",
        "\n",
        "### 4. **Efficiency**\n",
        "Immutability ensures that keys remain consistent throughout the dictionaryâ€™s lifecycle. By ensuring that keys cannot change, dictionaries maintain efficiency in operations like insertion, deletion, and lookup, all of which rely on the integrity of the key's hash value.\n",
        "\n",
        "### Immutable vs. Mutable Objects as Keys:\n",
        "\n",
        "| **Immutable Objects** (Valid Keys) | **Mutable Objects** (Invalid Keys) |\n",
        "|------------------------------------|-------------------------------------|\n",
        "| `str` (string)                     | `list` (list)                      |\n",
        "| `int` (integer)                    | `dict` (dictionary)                |\n",
        "| `float` (floating point)           | `set` (set)                        |\n",
        "| `tuple` (tuple, containing only immutable elements) | |\n",
        "\n",
        "### Example: Valid and Invalid Keys\n",
        "\n",
        "```python\n",
        "# Valid key (string)\n",
        "my_dict = {'key': 'value'}\n",
        "\n",
        "# Invalid key (list)\n",
        "my_dict = {[1, 2]: 'value'}  # Raises TypeError\n",
        "```\n",
        "\n",
        "### Conclusion\n",
        "The immutability of dictionary keys is critical for ensuring reliable and efficient hash-based lookups. Using mutable objects would make it impossible to maintain the consistency of the key-value mapping, resulting in potential errors and performance issues."
      ],
      "metadata": {
        "id": "KDmpRRZgSGiB"
      }
    }
  ]
}